#!/usr/bin/env bash

COMPILE=""
TARGETS=""

# Create a project.
#
function create_project {
    mkdir -p ./{debug,release,src,libs};
}

# Create a project for component.
#
function create_component {
    mkdir -p ./{bin,src,libs,tests};
    mkdir -p tests/reports;
}

# Install tools for auto.testing.
#
function install_flexunit {
    cp build/ut.zip libs 
    cd libs 
    tar -zxf ut.zip 
    rm ut.zip
}

# Will find and run the swf.
#
function run_project {
    local VERSION
    local SWF
    [[ "$1" == "-d" ]] && VERSION="debug"
    [[ "$1" == "-r" ]] && VERSION="release"
    [[ "$1" == "" ]] && VERSION="debug"
    SWF=$(find "$VERSION" -name "*.swf" | grep ".swf$" );    

    fdb $SWF
}

# Finds the command.
#
function findCommand {
	case $1 in
    	"-ip" ) create_project; exit;
        	;;
    	"-ic" ) create_component; exit;
        	;;
        "--run" ) run_project $2; exit;
        	;;
    	"-ut" ) install_flexunit; exit
        	;;
    	"-d" ) COMPILE="debug"
        	;;
    	"-l" ) COMPILE="lint"
        	;;
    	"-r" ) COMPILE="release"
        	;;
    	"-c" ) COMPILE="component"
        	;;
    	"-t" ) COMPILE="tests"
        	;;
        "--docs" ) open -a "Safari" "http://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/index.html"
                 exit
            ;;
    	* ) invalidCommand
	esac
}

# Invalid command?
#
function invalidCommand {
	echo "WAT?"
	usage
	exit
}

# Show usage.
#
function usage {
	echo "usage: ./flash-cli -i              initialize the project."
	echo "                   -d [task]       build debug version (task name is optional)."
	echo "                   -r [task]       build release version (task name is optional)."
	echo "                   -c [task]       build component (task name is optional)."
	echo "                   -t [task]       build and run tests (task name is optional)."
    echo ""
	echo "                   --run [-d|-r]   execute the application."
	echo "                   --docs          open the flash asdocs."
	echo "                   --ut            gets the build/ut.zip, with flexunit and many others,"
    echo "                                   and put them in the libs folder."
}

if [ $# -gt 0 ]; then

	if [ -n $1 ]; then

		findCommand $@
		counter=0
		for T in $*; do
			counter=$((counter + 1))
			if [ $counter -gt 1 ]; then
				TARGETS="$TARGETS $T"
			fi
		done

		if [ "$COMPILE" != "" ]; then
			ant -f build/$COMPILE.xml $TARGETS
		fi
	fi

    exit
fi

usage
exit
